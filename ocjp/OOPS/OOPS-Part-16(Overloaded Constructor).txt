Overloaded Constructors
=======================
Within a class we can declare multiple constructors and all these constructors having same name but different type of arguments,hence all these constructors are considered as overloaded constructors.Hence overloading concept available for constructors

eg-
class Test {

	Test() {
		this(10);
		System.out.println("no arg cons");

	}

	Test(int i) {
		this(10.5);
		System.out.println("int arg cons");

	}

	Test(double d) {
		System.out.println("float arg cons");

	}
	
	public static void main(String[] args) {
		Test t1=new Test();//float arg cons
int arg cons
no arg cons
		Test t2=new Test(10);//float arg cons
int arg cons
		Test t3=new Test(10.5);//float arg cons
		Test t4=new Test(10L);//float arg cons
	}

}

For constructors inheritance and overriding concepts are not available but overloading concept is available.
Every class in java including abstract class can contain constructors but interface cannot contain constructor

//valid
class Test{
Test(){
}
}
//valid
abstract class Test{
Test(){
}
}

//invalid
interface Test{
Test(){
}
}


Case1:
-----
Recursive method call is a runtime exception saying stackoverflow error.But in our prog if there is recursive constructor invocation,the code wont compile and it will give error


package Test;

class Test {

	public static void m1() {
		m2();
	}

	public static void m2() {
		m1();
	}

	public static void main(String[] args) {
		m1();
		m2();
		System.out.println("Hello");
	}

}
Exception in thread "main" java.lang.StackOverflowError


Recursive Constructor Invocation
class Test {

	Test() {
		this(10);
	}

	Test(int i) {
		this();
	}

	public static void main(String[] args) {		
		System.out.println("Hello");
	}

}



case-2
=====
class T {
	T(int i) {

	}
}

class Test extends T {
	Test() {

	}

	public static void main(String[] args) {

	}

}//compile time error:Implicit super constructor T() is undefined. Must explicitly invoke another constructor



Note
=====
1)If parent class contains any argument constructor,then while writing child classes,we have to take special care wrt constructors

2)whenever we are writing any argument constructor, it is highly recommended to write no arg constructor also


Case-3
======
class T {
	T() throws IOException {

	}
}

class Test extends T {
	Test() {
		super();
	}

	public static void main(String[] args) {

	}

}

//unreported exception

If a parent class constructor throws any checked exception,compulsory child constructor should throw the same checked exception or its parent,otherwise the code wont compile


True/False
===========
1)Main purpose of constructor is to create object-false
2)Main purpose of constructor is to perform initialization of object-true
3)Name of the constructor need not be same as class name-invalid
4)Return type concept applicable for constructors but only void-invalid
5)We can apply any modifier for constructor-invalid
6)Default constructor generated by jvm-false(compiler responsible)
7)Compiler will always generate default constructor-false
8)If we are not writing no arg constructor,then compiler will generate default constructor-false
9)Every no arg constructor is always default constructor-false
10)Default constructor is always no arg constructor-true
11)First line inside every constructor should be either super() or this().If we are not writing anything,compiler will generate this().-invalid
12)For constructor overloading and overriding concepts are applicable-false
13)For constructor,inheritance concept applicable but not overriding-false
14)Only concrete classes can contain cons, but abstract classes cant contain cons-false
15)Interface can contain cons-false
16)Recursive cons invocation is a runtime exception-invalid(Error)
17)If parent class cons throws some checked exception,compulsory child class cons should throw same checked exception/or its child-false(parent)