Prototype of Default Constructor
================================
1)It is always no arg constructor
2)Access modifier of default constructor same as class access modifier.This rule is applicable for public and default
3)It contains only 1 line

super();
It is a no argument call to super class constructor

Programmers Code		Compilers code
=================		==============
1)class Test{			class Test{
				Test(){
				super();
				}
}				}
----------------------------------------------------
2)public class Test{		public class Test{
				
}				public Test(){
				super();
				}
				}
--------------------------------------------------
3)public class Test{		public class Test{
void Test(){			public Test(){super();}
}
}				void Test(){
				}
				}
				
---------------------------------------------------
4)class Test{			class Test{
Test(){			       Test(){super();}
}				}
				}
-----------------------------------------------------

5)class Test{			class Test{
Test(int i){			       Test(int i){super();}
}				}
				}
-----------------------------------------------------

6)class Test{			class Test{
					Test(){	this(10)}
Test(){	this(10)}		       Test(int i){super();}
				}
Test(int i){}
}				
-----------------------------------------------------

The first line inside every constructor must be super or this and if we are not writing anything,compiler will always place super();
====================================================================================================================================
case1:
======
class Test{
Test(){
S.o.p(1);
super();
}
}
//CE:super must be first statement

Within constructor we can either take super or this but not both simultaneously
=================================================================================
case2:
======
class Test{
Test(){
super();
this();
}


Within constructor only, we can either take super or this.If we are trying to use outside of cons, we will get error
====================================================================================================================
case3:
======
class Test{
void Test(){
super();
}
}
//CE:this must be first statement

super(),this()   			super,this
=================================================
1)these are constructor		1)used to refer current and super class methods
calls to call super class
and current class constru-
ctors

2)can be used in constructor	2)we can use anywhere except static
as the first line 

3)can be used once in		3)can be used any number of times
constructor


Eg:
===
super and this

class T {
	int x = 100;
}

class Test extends T {
	int x = 300;

	public void m1() {
		System.out.println(this.x);
		System.out.println(super.x);
	}

	public static void main(String[] args) {
		Test t = new Test();
		t.m1();
	}
}

300
100


public static void main(String[] args) {
		System.out.println(this.x);
		System.out.println(super.x);
	}
CE:Cannot use this in a static context