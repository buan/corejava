Collection(I)
=============
Collection interface defines most common methods which are applicable to any collection object

boolean add(Object o)
boolean addAll(Collection c)
boolean remove(Collection c)
boolean removeAll(Collection c)
boolean retainAll(Collection c)
To remove all objects except present in C

void clear()
boolean contains(Object O)
boolean containsAll(Collection c)
boolean isEmpty()
int size()
Object[] toArray()
Iterator iterator();

List(I)
========
We can preserve insertion order via index and we can differentiate duplicate objects via index hence index will play very important role in List.List interface contains all these methods

Object get(int index)
Object remove(int index)

Object set(int index,Object new)
to replace the element present at specified index with provided Object and returns old object

int indexOf(Object o)

int lastindexOf(Object o)

ListIterator listIterator();


Underlying data structure is resizable array
Duplicate allowed
Insertion order preserved
Heterogenous Objects allowed except TreeSet and TreeMap
Null insertion is possible


Constructors
------------
1.ArrayList l=new ArrayList()
creates empty arraylist with default initial capacity. Once arraylist reaches max capacity a new arraylist object will be created with new capacity=(current capacity*3/2)+1

eg-
import java.util.ArrayList;

class Test {
	 
	public static void main(String[] args) {
		ArrayList l=new ArrayList();
		l.add(10);
		l.add("A");
		l.add(10);
		l.add(null);
		System.out.println(l);//[10, A, 10, null]
		l.remove(2);
		System.out.println(l);//[10, A, null]
		l.add(2,"M");
		System.out.println(l);//[10, A, M, null]
		l.add("N");
		System.out.println(l);//[10, A, M, null, N]
		
	}
}


2. ArrayList l =new ArrayList(int initialcap)
creates an empty arraylist object with specified inital capacity


3. ArrayList l=new ArrayList(Collection c)
creates an equivalent arraylist object for the given collection


